{"version":3,"sources":["redux/types.js","components/tile.js","components/board.js","components/round.js","redux/actions.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["ActionTypes","ROUND_UP","PLAY_AGAIN","Tile","tile","color","bc","id","clickMe","className","style","backgroundColor","onClick","Board","stateTiles","clickTry","map","key","React","memo","connect","dispatch","playAgain","type","round","console","log","Fragment","window","location","reload","App","props","state","firstColor","roundUp","singleTile","find","index","indexOf","setState","newStateTiles","filter","i","this","tiles","soretedTiles","Math","random","toString","slice","sort","x","y","Component","newTiles","payload","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","INITIAL_STATE","appReducer","action","newRound","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b1ede6b9.chunk.js","sourcesContent":["const ActionTypes = {\n  ROUND_UP: 'ROUND_UP',\n  PLAY_AGAIN: 'PLAY_AGAIN',\n};\nexport default ActionTypes;\n","import React from 'react';\n\nconst Tile = ({ tile: { color, bc, id }, clickMe }) => {\n  return (\n    <div\n      className=\"tile-container\"\n      style={{ backgroundColor: bc }}\n      onClick={() => {\n        clickMe(color, id);\n      }}\n    >\n      {color}\n    </div>\n  );\n};\n\nexport default Tile;\n","import React from 'react';\nimport Tile from './tile';\n\nconst Board = ({ stateTiles, clickTry }) => {\n  return (\n    <div className=\"container\">\n      {stateTiles &&\n        stateTiles.map((tile) => <Tile key={tile.id} tile={tile} clickMe={clickTry}></Tile>)}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { playAgain } from '../redux/actions';\n\nconst Round = ({ round, playAgain }) => {\n  const clickRefresh = () => {\n    playAgain();\n    window.location.reload();\n  };\n  console.log('round');\n  return (\n    <React.Fragment>\n      {round === 9 ? <button onClick={clickRefresh}>PLAY MORE</button> : <h2>ROUND : {round}</h2>}\n    </React.Fragment>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    playAgain: () => dispatch(playAgain()),\n  };\n};\n\nexport default React.memo(connect(null, mapDispatchToProps)(Round));\n","import ActionTypes from './types';\n\nexport const roundUp = (tiles) => ({\n  type: ActionTypes.ROUND_UP,\n  payload: tiles,\n});\n\nexport const playAgain = () => ({\n  type: ActionTypes.PLAY_AGAIN,\n});\n","import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { roundUp } from './redux/actions';\nimport Board from './components/board';\nimport Round from './components/round';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstColor: '',\n      stateTiles: [],\n    };\n  }\n\n  componentDidMount() {\n    const { tiles, round } = this.props;\n    if (round === 1) {\n      const newTiles = tiles.map((tile) => ({\n        ...tile,\n        bc: 'grey',\n        id: Math.random().toString(34).slice(2),\n      }));\n      const soretedTiles = newTiles.sort((x, y) => (x.id > y.id ? 1 : y.id > x.id ? -1 : 0));\n      this.setState({ stateTiles: [...soretedTiles] });\n    }\n  }\n\n  clickTry = (color, id) => {\n    const { firstColor, stateTiles } = this.state;\n    const { roundUp } = this.props;\n    let singleTile = stateTiles.find((tile) => tile.id === id);\n    let index = stateTiles.indexOf(singleTile);\n    stateTiles[index]['bc'] = color;\n    this.setState({\n      stateTiles: stateTiles,\n    });\n\n    if (firstColor === '') {\n      this.setState({ firstColor: color });\n    } else if (firstColor === color) {\n      const newStateTiles = stateTiles.filter((i) => i.color !== color);\n      this.setState({ firstColor: '', stateTiles: newStateTiles });\n      roundUp(newStateTiles);\n      stateTiles.map((tile) => (tile.bc = 'grey'));\n    } else {\n      this.setState({ firstColor: '' });\n      stateTiles.map((tile) => (tile.bc = 'grey'));\n    }\n  };\n\n  render() {\n    const { round } = this.props;\n    const { stateTiles } = this.state;\n    return (\n      <div className=\"App\">\n        <Board stateTiles={stateTiles} clickTry={this.clickTry} />\n        <Round round={round} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  round: state.round,\n  tiles: state.tiles,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    roundUp: (newTiles) => dispatch(roundUp(newTiles)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ActionTypes from './types';\n\nconst INITIAL_STATE = {\n  round: 1,\n  tiles: [\n    { color: 'red' },\n    { color: 'red' },\n    { color: 'yellow' },\n    { color: 'yellow' },\n    { color: 'green' },\n    { color: 'green' },\n    { color: 'purple' },\n    { color: 'purple' },\n    { color: 'orange' },\n    { color: 'orange' },\n    { color: 'pink' },\n    { color: 'pink' },\n    { color: 'lightBlue' },\n    { color: 'lightBlue' },\n    { color: 'blue' },\n    { color: 'blue' },\n  ],\n};\n\nconst appReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ActionTypes.ROUND_UP:\n      const newRound = (state.round += 1);\n      return {\n        ...state,\n        round: newRound,\n        tiles: action.payload\n      };\n    case ActionTypes.PLAY_AGAIN:\n      return {\n        ...state,\n        round: 1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport appReducer from './reducer';\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\nexport const store = createStore(appReducer, applyMiddleware(...middlewares));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}